// 11/11/2024

 Team rules should contain the audit rules (what happens for a successful audit, costs for audit, etc)

 - 1st Round --> Every agent allocated randomly to evenly divided teams
                - Agents vote on team rule
                for i iterations:
                    for n turns:
                        - Agents roll dice & get a score
                        - Agents make contribution to team pool
                        - server allocated pool to agents based on agent's rule (could be dependant on team rule)
                        - agent's expected contribution/allocation (based on team rule) - no point broadcasting agent's actual contributions
                        - audit process (vote someone out)
                        - agents query team rule
                    - agents die according to threshold
                - team wins

- Extension, repeat game and redistribute team:
- agents are individual, must re-form teams based on memory/experience of other agents, left over agents randomly allocated
- 2nd Round begins
- Team Y comes up with required Server methods based on above
- Team X comes up with required Agent methods based on above
- Team Z comes up with team forming algorithm?
- Every (real life) team must come up with their team rule

Functional Design:

Team 2, 5
- Interface IDiceServer:
    Fields:
        - _turns: int
        - _teamSize: int
        - _numAgents: int
        - _rounds: int
        - _threshold: int
        - teams: {UUID: *Team}

    Methods:
        # - createServer():
        # - createAgents():
        TEAM 2:
        - createServer(int threshold, int rounds, int turns, int teamSize, int numAgents) -> IDiceServer
        - formTeams(): Changes the fields for each agent (populates their team data)
        - voteForArticlesofAssociation(): Looks at each agent and calls their AoA specific functions
        - override runTurn() and all turn based methods (initial dice rolling) -> call agent specific function to roll dice
        - manageResources():
            - Goes through all agents and calls their embedded personal strategy (for contribution or taking away from the pool)
            - redistribute based on predecided strategy

        TEAM 5:
        - generateReport():
            - Server looks at agent specific rolls and the common pool within the server, and calls agent specific
            - each agent has this broadcastReport(teamCommonPool int): teamCommonPool is team[uuid].commonPool
        - audit():
        - modifyRules():
        - verifyThreshold()/terminateAgents():
    Logic:
        - GameRunner:
            - resource management and redistribution (common pool)
            - Report:
                - Common Pool Status
                - Expected Common pool if everyone complied to rules
                - What each agent rolled
            - Voting:
                - auditing and compliance
                - rule mod

- Struct Team:
    - teamId: UUID
    - commonPool: int
    - agents: set(int)
    - articlesOfAssociation: ArticlesOfAssociation

Team 1, 3?
- Interface IDiceAgent:
    Fields:
        - team: *Team / teamId: int
        - memory:
        - scores: list[int]

    Methods:
        - rollDice():
            while loop:
                - rng + score calculation
                - doIStick()
        - makeContribution() -> int: Deposit into the pool based on personal strategy
        - broadcastReport(teamCommonPool int): We need a message for this (called by the server)
        - voteForAudit() -> *UUID: Checks report + memory
        - proposeAoAChange() -> bool
        - voteForNewAoA() -> Enum[AoA]

- Struct ArticlesOfAssociation:

- Struct Memory:
